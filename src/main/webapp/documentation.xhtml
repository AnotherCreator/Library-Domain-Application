<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- Template Style / structure as demo'd in lecture -->

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                template="./WEB-INF/templates/pageTemplate.xhtml">

    <ui:define name="title">Final Project Read Me</ui:define>
    <ui:define name="content">
        <h1>Final Project Readme</h1>
        <ui:fragment rendered="#{loginController.admin}">
            <a href="http://localhost:8080/jreginaldo-fp/docs/index.html">Detailed Javadocs Page</a>
        </ui:fragment>

        <h2>Summary</h2>
        <h5>Library Application</h5>
        <ul><li>
            The goal of this project was to build a functioning Multi-layer Maven Web Application based off of a business domain
            of our choice. In my case, I have chosen to model a library domain.
            <br/>
            In this library domain, I focused on adding functionality to 3 main user groups: Admins, Employees, and Members.
            These are the three main entities that can freely interact with the web application based on their security
            clearance.
        </li></ul>
        <h5>Project Specifications</h5>
        <ul>
            <li>For basic CSS, I have included the necessary references for Bootstrap to work.</li>
            <li>I have also utilized the built in template functionality by JSF. In this project, referenced by
                the demos in the lectures, I have included the "ui:composition" tags and "ezcomp" templates when
                appropriate.</li>
            <li>In order to make navigation familiar and easy, I have also included the basic Bootstrap template for a
            fixed navigation pane at the top. Depending on user credentials, certain links may omitted.</li>
            <li>For member infomation stored in the database, employees and admins are able to read, create, update, and
            delete information stored in the database.</li>
            <li>The various information currently displayed on the website is also formatted in a list view.</li>
        </ul>

        <br/>
        <h2>Design</h2>

        <br/>
        <h2>Installation</h2>
        <h5>Required Programs:</h5>
        <h5>Java IDE</h5>
        <ul>
            <li><a href="https://www.jetbrains.com/idea/">IntelliJ IDE</a></li>
            <li><a href="https://netbeans.apache.org/download/index.html">NetBeans IDE</a></li>
        </ul>
        <h5>Java JDK Installation</h5>
        <ul><li>
            <a href="https://adoptium.net/marketplace/?version=11">Adoptium: jdk-11.0.17+8 JDK</a>
        </li></ul>
        <h5>Database</h5>
        <ul><li>
            <a href="https://dev.mysql.com/downloads/mysql/">MySQL</a>
        </li></ul>
        <h5>Payara</h5>
        <ul><li>
            <a href="https://www.payara.fish/downloads/payara-platform-community-edition/">Payara Server 5.2022.4(Full)</a>
        </li></ul>
        <h5>Set-up:</h5>

        <br/>
        <h2>Runtime</h2>
        <h5>Sample Test Script</h5>
        <h5>Admin: Create Member</h5>
        <ul>
            <li>Login with user/password: admin </li>
            <li>Navigate to "Create Member" page on top nav bar</li>
            <li>Fill in the form with desired information (Member ID field will be read only and auto-generated)</li>
            <li>Click "Create Member" button</li>
            <li>A "Confirmation" page should show with the newly included member entity</li>
            <li>Navigate back "Admin" page to access data manipulation commands</li>
        </ul>
        <h5>Admin: Read Member</h5>
        <ul>
            <li>Login with user/password: admin </li>
            <li>Navigate to "Create Member" page on top nav bar</li>
            <li>Create a new entity using steps from "Admin: Create Member" or refer to existing data set</li>
            <li>Select "READ" on desired entity</li>
            <li>A new page called "Member Information" will appear with the entity data filled into its respective fields</li>
            <li>Navigate back "Admin" page to access data manipulation commands</li>
        </ul>
        <h5>Admin: "Successful" Update Member</h5>
        <ul>
            <li>Login with user/password: admin </li>
            <li>Navigate to "Create Member" page on top nav bar</li>
            <li>Create a new entity using steps from "Admin: Create Member" or refer to existing data set</li>
            <li>Select "UPDATE" on desired entity</li>
            <li>A new page called "Edit Member Information" will appear with the entity data filled into its respective fields</li>
            <li>Without editing the ID, change any desired fields to be updated</li>
            <li>After clicking the "Update Member" button, you will return to the "Admin" page with the updated entity data</li>
        </ul>
        <h5>Admin: "Successful" Delete Member</h5>
        <ul>
            <li>Login with user/password: admin </li>
            <li>Navigate to "Create Member" page on top nav bar</li>
            <li>Create a new entity using steps from "Admin: Create Member" or refer to existing data set</li>
            <li>Select "DELETE" on desired entity</li>
            <li>A new page called "Delete Member" will appear with the entity data filled into its respective fields</li>
            <li>Without editing the ID, clicking the "Delete Member" button will remove the entity from the database</li>
            <li>After clicking the "Delete Member" button, you will return to the "Admin" page with the updated database data</li>
        </ul>

        <h5>Expected Results</h5>
        <ul>
            <li> </li>
        </ul>
        <h5>Known Isssues</h5>
        <ul>
            <li>(Client Side) Upating Member Info: Since the ID can be manually changed,
                the user can mistakenly update another member's info</li>

            <li>(Client Side) Deleting Member Info: Since the ID can be manually changed,
                the user can mistakenly delete another member's entity</li>
        </ul>
        <br/>

        <h2>Screen Captures</h2>
        <h5>Successful Server Start: </h5>
        <h:graphicImage url="resources/images/login_page.png"/>
        <h5>Successful "Admin" Login: </h5>
        <h:graphicImage url="resources/images/admin_login.png"/>
        <h5>Admin Database View: </h5>
        <h:graphicImage url="resources/images/admin_view.png"/>
        <h5>Successful "Admin" Member Create: </h5>
        <h:graphicImage url="resources/images/admin_create.png"/>
        <h5>Successful "Admin" Member Update: </h5>
        <h:graphicImage url="resources/images/admin_update.png"/>
        <h5>Successful "Admin" Member Delete: </h5>
        <h:graphicImage url="resources/images/admin_delete.png"/>
        <br/>
        <br/>

        <h2>Development Insights</h2>
        <h5>Things I Learned</h5>
        <ul>
            <li>Security Aspect: Since this is my first interaction with implementing security, I opted to follow
                along with the structures demo'd in class. I found it quite enjoyable to see how the back-end is structured
                and the implementation of password hashing.</li>
            <li>Maven: I really enjoyed using Maven and learning how it can help streamline dependencies across
                different machines.</li>
            <li>Entity Relationships: Although I had an idea of how database entities can be related with the help of
            the database class, this project helped apply that knowledge into something that I can freely code and
            manipulate.</li>
            <li>Entity Constraints: Although I am familiar with data constraints, this is my first time seeing those
            constraints being added to the actual variable declaration and not manually checked later on.</li>
        </ul>
        <h5>What I Liked / Disliked</h5>
        <ul>
            <li>The thing I loved the most about this project was how unique it was, at least to me. This is the first
                project that I have done that asks of us to create a web domain modeling a business structure. The two main
                projects I have done so far are more of "mini" applications that can be modules of something more complex.
                <br/>
                I also enjoyed this project because it helps tie in the knowledge I have gained from the two web development
                courses I have taken so far. Although there was a significant syntax change while implementing JSF, it was
                largely the same. It also helped that we didn't have to do a lot of manual styling with the help of Boostrap.
            </li>
            <li>
                I did not have any "strong" dislikes that struck out to me. If there was one, it would probably be all
                the little quirks that IntelliJ had when following along the lectures. For example, the Bootstrap script
                tag in the .xhtml files show up as an error despite still working.
            </li>
        </ul>
        <h5>Final Thoughts</h5>
        <ul>
            <li>Overall, I learned a lot from this semester and I definitely would like to work on this project in my
                free time.</li>
        </ul>
    </ui:define>
</ui:composition>
